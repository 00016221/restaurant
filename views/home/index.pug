include ../head.pug
body.text-white
  header.mb-40
    .container.mx-auto.my-4
      h1.text-5xl.font-bold.text-center List of Orders

  main
    section(class="h-[65vh]")
      .container.mx-auto
        //- list of foods
        ul.food__list.w-full.flex.justify-center.gap-4.flex-wrap
          li.food__items.w-56
            .food__card.w-full.p-8.border.rounded-xl
              h3.food__name.text-bold.text-3xl.text-center.mb-10 Food Name
              p.food__time Time ordered: 15.00
              p.food__state Status: Ready
              p.food__table-id Table number: 1
              .btn-wrapper.mt-5.flex.justify-between
                button(class="btn_update w-full border-2 border-green-600 bg-green-600 py-2 px-3 rounded-md hover:bg-white hover:text-green-600 duration-300 active:scale-110") Update
        
        
        //- Add new food form
        .blur.w-full.h-full.backdrop-blur-sm.absolute.top-0.hidden
        div(class="add-form w-1/5 p-10 bg-[#0f172a] border-2 rounded-lg shadow-lg shadow-white duration-300 absolute right-0 top-0 translate-y-1/2 translate-x-[125%] ")
          h3.food-name.font-bold.text-bold.text-center.text-xl.mb-5 Add new
          
          .flex.justify-between
            select.select.text-black.py-2.px-3.rounded-md.w-32.text-center
                option(value="preparing") Preparing
                option(value="ready") Ready

            button(class="btn-update py-1 px-4 bg-green-600 border-2 border-green-600 hover:bg-white hover:text-green-600 duration-300 rounded active:scale-110", title="add", type="button") Update

    //- Disclaimer
    section
        p.text-center.text-lg “This web application was created to fulfill Web Technology module's requirements and does not represent an actual company or service”.
  script.
    // Check if token exists in local storage
    const token = localStorage.getItem('chief_token');

    // If token doesn't exist, redirect to login page
    if (!token) {
      window.location.href = '/login'; // Adjust the URL to your login page
    }

    document.addEventListener('DOMContentLoaded', function() {
      //- Create a function to find html elements
      function findElement(element, parent = document) {
        return parent.querySelector(element);
      }

      async function getOrderById(id) {
        try {
          const res = await axios.get(`/api/order/${id}`);
          return res.data;
        } catch (err) {
          console.log(err);
          throw err; // Rethrow the error to handle it in the caller function
        }
      }

      async function updateOrder(id) {
        try {
          const order = await getOrderById(id);
          const foodData = order.order

          const elFoodName = findElement(".food-name");
          elFoodName.textContent = foodData.foodName;

          //- Update form btn
          const elUpdateBtn = findElement(".btn-update")
          elUpdateBtn.addEventListener("click", function(e) {
            const elSelect = findElement(".select")
            const selectedIndex = elSelect.selectedIndex
            const foodState = elSelect.options[selectedIndex].value 

            const orderData = {
              foodName: foodData.foodName,
              orderedTime: foodData.orderedTime,
              foodState: foodState,
              tableId: foodData.tableId,
            };

            axios
            .put(`/api/order/${order.id}`, orderData)
            .then(response => {
              window.location.href = '/'              
            })
            .catch(error => {
              if(error.response)
                alert(JSON.stringify(error.response.data.errors))
              else
                alert(error)
            });
          })
        } catch (err) {
          console.log(err); // Handle errors if getOrderById fails
        }
      }

      //- Render the data 
      function renderData(data) {
        const elFoodsList = findElement(".food__list");
        const elFoodsListItems = findElement(".food__items");
        elFoodsList.innerHTML = null;

        const fragment = document.createDocumentFragment();

        data.forEach(d => {
          foodData = d.order;

          const template = elFoodsListItems.cloneNode(true)

          const name = findElement(".food__name", template);
          name.textContent = foodData.foodName;

          const time = findElement(".food__time", template);
          time.textContent = `Time ordered: ${foodData.orderedTime}`;

          const state = findElement(".food__state", template);
          state.textContent = `State: ${foodData.foodState}`;

          const tableNumber = findElement(".food__table-id", template);
          tableNumber.textContent = `Table number: ${foodData.tableId}`;

          const btnUpdate = findElement(".btn_update", template);
          btnUpdate.id = d.id;

          fragment.appendChild(template);

          template.addEventListener("click", function(e){
            //- Open update form
            if (e.target.className.includes("btn_update")) {
              const elUpdateForm = findElement(".add-form")
              const elBlur = findElement(".blur")

              elUpdateForm.classList.toggle("show")
              elBlur.classList.toggle("hidden")
              if(elUpdateForm.className.includes("show")) {
                elUpdateForm.style.transform = "translate(-75%, 50%)"
              } else {
                elUpdateForm.style.transform = "translate(125%, 50%)"
              }
            }
            updateOrder(e.target.id)
          })
        })

        elFoodsList.appendChild(fragment)
      }

      //- get the orders
      axios
      .get('/api/order')
      .then(function(res) {
        orders = res.data 
        renderData(orders)
      })
      .catch(function(err) {
        console.log(err);
      });
    });